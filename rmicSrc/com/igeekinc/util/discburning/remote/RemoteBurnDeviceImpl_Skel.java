// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.util.discburning.remote;

public final class RemoteBurnDeviceImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("boolean acquireExclusiveAccess()"),
	new java.rmi.server.Operation("void askForMediaReservation()"),
	new java.rmi.server.Operation("boolean canTrayOpen()"),
	new java.rmi.server.Operation("void closeTray()"),
	new java.rmi.server.Operation("void ejectMedia()"),
	new java.rmi.server.Operation("long getAvailableSpace()"),
	new java.rmi.server.Operation("double getAvailableSpeeds()[]"),
	new java.rmi.server.Operation("com.igeekinc.util.discburning.BurnState getBurnState()"),
	new java.rmi.server.Operation("com.igeekinc.util.discburning.BurnDeviceID getID()"),
	new java.rmi.server.Operation("com.igeekinc.util.discburning.MediaState getMediaState()"),
	new java.rmi.server.Operation("com.igeekinc.util.discburning.MediaStatus getMediaStatus()"),
	new java.rmi.server.Operation("com.igeekinc.util.discburning.MediaType getMediaType()"),
	new java.rmi.server.Operation("java.lang.String getName()"),
	new java.rmi.server.Operation("com.igeekinc.util.discburning.MediaType getSupportedMedia()[]"),
	new java.rmi.server.Operation("boolean isAccessExclusive()"),
	new java.rmi.server.Operation("boolean isMediaReserved()"),
	new java.rmi.server.Operation("boolean isTrayOpen()"),
	new java.rmi.server.Operation("void openTray()"),
	new java.rmi.server.Operation("void releaseExclusiveAccess()"),
	new java.rmi.server.Operation("void releaseMediaReservation()"),
	new java.rmi.server.Operation("void setEventDelivery(com.igeekinc.util.discburning.remote.RemoteDiscBurningEventDelivery)")
    };
    
    private static final long interfaceHash = -9056504840757598143L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	com.igeekinc.util.discburning.remote.RemoteBurnDeviceImpl server = (com.igeekinc.util.discburning.remote.RemoteBurnDeviceImpl) obj;
	switch (opnum) {
	case 0: // acquireExclusiveAccess()
	{
	    call.releaseInputStream();
	    boolean $result = server.acquireExclusiveAccess();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // askForMediaReservation()
	{
	    call.releaseInputStream();
	    server.askForMediaReservation();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // canTrayOpen()
	{
	    call.releaseInputStream();
	    boolean $result = server.canTrayOpen();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // closeTray()
	{
	    call.releaseInputStream();
	    server.closeTray();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // ejectMedia()
	{
	    call.releaseInputStream();
	    server.ejectMedia();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // getAvailableSpace()
	{
	    call.releaseInputStream();
	    long $result = server.getAvailableSpace();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // getAvailableSpeeds()
	{
	    call.releaseInputStream();
	    double[] $result = server.getAvailableSpeeds();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // getBurnState()
	{
	    call.releaseInputStream();
	    com.igeekinc.util.discburning.BurnState $result = server.getBurnState();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // getID()
	{
	    call.releaseInputStream();
	    com.igeekinc.util.discburning.BurnDeviceID $result = server.getID();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 9: // getMediaState()
	{
	    call.releaseInputStream();
	    com.igeekinc.util.discburning.MediaState $result = server.getMediaState();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 10: // getMediaStatus()
	{
	    call.releaseInputStream();
	    com.igeekinc.util.discburning.MediaStatus $result = server.getMediaStatus();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 11: // getMediaType()
	{
	    call.releaseInputStream();
	    com.igeekinc.util.discburning.MediaType $result = server.getMediaType();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 12: // getName()
	{
	    call.releaseInputStream();
	    java.lang.String $result = server.getName();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 13: // getSupportedMedia()
	{
	    call.releaseInputStream();
	    com.igeekinc.util.discburning.MediaType[] $result = server.getSupportedMedia();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 14: // isAccessExclusive()
	{
	    call.releaseInputStream();
	    boolean $result = server.isAccessExclusive();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 15: // isMediaReserved()
	{
	    call.releaseInputStream();
	    boolean $result = server.isMediaReserved();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 16: // isTrayOpen()
	{
	    call.releaseInputStream();
	    boolean $result = server.isTrayOpen();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 17: // openTray()
	{
	    call.releaseInputStream();
	    server.openTray();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 18: // releaseExclusiveAccess()
	{
	    call.releaseInputStream();
	    server.releaseExclusiveAccess();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 19: // releaseMediaReservation()
	{
	    call.releaseInputStream();
	    server.releaseMediaReservation();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 20: // setEventDelivery(RemoteDiscBurningEventDelivery)
	{
	    com.igeekinc.util.discburning.remote.RemoteDiscBurningEventDelivery $param_RemoteDiscBurningEventDelivery_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_RemoteDiscBurningEventDelivery_1 = (com.igeekinc.util.discburning.remote.RemoteDiscBurningEventDelivery) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.setEventDelivery($param_RemoteDiscBurningEventDelivery_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
