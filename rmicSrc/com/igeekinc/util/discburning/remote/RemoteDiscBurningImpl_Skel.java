// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.util.discburning.remote;

public final class RemoteDiscBurningImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void burnVolume(com.igeekinc.util.discburning.BurnDevice, com.igeekinc.util.discburning.BurnVolume, com.igeekinc.util.discburning.BurnSetupProperties, com.igeekinc.util.discburning.BurnProgressIndicator, com.igeekinc.util.pauseabort.PauserControlleeIF)"),
	new java.rmi.server.Operation("void close()"),
	new java.rmi.server.Operation("com.igeekinc.util.discburning.BurnVolume createRecordableVolume(java.lang.String, com.igeekinc.util.pauseabort.PauserControlleeIF)"),
	new java.rmi.server.Operation("void discardRecordableVolume(com.igeekinc.util.discburning.BurnVolume)"),
	new java.rmi.server.Operation("com.igeekinc.util.discburning.remote.RemoteBurnDevice getBurnDeviceForID(com.igeekinc.util.discburning.BurnDeviceID)"),
	new java.rmi.server.Operation("com.igeekinc.util.discburning.remote.RemoteBurnDevice getBurningDevices()[]"),
	new java.rmi.server.Operation("void setBurnDeviceEventDelivery(com.igeekinc.util.discburning.remote.RemoteDiscBurningEventDelivery)")
    };
    
    private static final long interfaceHash = -2314618545386665974L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (hash != interfaceHash)
	    throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	
	com.igeekinc.util.discburning.remote.RemoteDiscBurningImpl server = (com.igeekinc.util.discburning.remote.RemoteDiscBurningImpl) obj;
	switch (opnum) {
	case 0: // burnVolume(BurnDevice, BurnVolume, BurnSetupProperties, BurnProgressIndicator, PauserControlleeIF)
	{
	    com.igeekinc.util.discburning.BurnDevice $param_BurnDevice_1;
	    com.igeekinc.util.discburning.BurnVolume $param_BurnVolume_2;
	    com.igeekinc.util.discburning.BurnSetupProperties $param_BurnSetupProperties_3;
	    com.igeekinc.util.discburning.BurnProgressIndicator $param_BurnProgressIndicator_4;
	    com.igeekinc.util.pauseabort.PauserControlleeIF $param_PauserControlleeIF_5;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_BurnDevice_1 = (com.igeekinc.util.discburning.BurnDevice) in.readObject();
		$param_BurnVolume_2 = (com.igeekinc.util.discburning.BurnVolume) in.readObject();
		$param_BurnSetupProperties_3 = (com.igeekinc.util.discburning.BurnSetupProperties) in.readObject();
		$param_BurnProgressIndicator_4 = (com.igeekinc.util.discburning.BurnProgressIndicator) in.readObject();
		$param_PauserControlleeIF_5 = (com.igeekinc.util.pauseabort.PauserControlleeIF) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.burnVolume($param_BurnDevice_1, $param_BurnVolume_2, $param_BurnSetupProperties_3, $param_BurnProgressIndicator_4, $param_PauserControlleeIF_5);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // close()
	{
	    call.releaseInputStream();
	    server.close();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // createRecordableVolume(String, PauserControlleeIF)
	{
	    java.lang.String $param_String_1;
	    com.igeekinc.util.pauseabort.PauserControlleeIF $param_PauserControlleeIF_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_PauserControlleeIF_2 = (com.igeekinc.util.pauseabort.PauserControlleeIF) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.util.discburning.BurnVolume $result = server.createRecordableVolume($param_String_1, $param_PauserControlleeIF_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // discardRecordableVolume(BurnVolume)
	{
	    com.igeekinc.util.discburning.BurnVolume $param_BurnVolume_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_BurnVolume_1 = (com.igeekinc.util.discburning.BurnVolume) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.discardRecordableVolume($param_BurnVolume_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // getBurnDeviceForID(BurnDeviceID)
	{
	    com.igeekinc.util.discburning.BurnDeviceID $param_BurnDeviceID_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_BurnDeviceID_1 = (com.igeekinc.util.discburning.BurnDeviceID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    com.igeekinc.util.discburning.remote.RemoteBurnDevice $result = server.getBurnDeviceForID($param_BurnDeviceID_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // getBurningDevices()
	{
	    call.releaseInputStream();
	    com.igeekinc.util.discburning.remote.RemoteBurnDevice[] $result = server.getBurningDevices();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // setBurnDeviceEventDelivery(RemoteDiscBurningEventDelivery)
	{
	    com.igeekinc.util.discburning.remote.RemoteDiscBurningEventDelivery $param_RemoteDiscBurningEventDelivery_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_RemoteDiscBurningEventDelivery_1 = (com.igeekinc.util.discburning.remote.RemoteDiscBurningEventDelivery) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.setBurnDeviceEventDelivery($param_RemoteDiscBurningEventDelivery_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
