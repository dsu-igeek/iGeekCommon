// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.util.discburning.remote;

public final class RemoteDiscBurningImpl_Stub
    extends java.rmi.server.RemoteStub
    implements com.igeekinc.util.discburning.remote.RemoteDiscBurning, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void burnVolume(com.igeekinc.util.discburning.BurnDevice, com.igeekinc.util.discburning.BurnVolume, com.igeekinc.util.discburning.BurnSetupProperties, com.igeekinc.util.discburning.BurnProgressIndicator, com.igeekinc.util.pauseabort.PauserControlleeIF)"),
	new java.rmi.server.Operation("void close()"),
	new java.rmi.server.Operation("com.igeekinc.util.discburning.BurnVolume createRecordableVolume(java.lang.String, com.igeekinc.util.pauseabort.PauserControlleeIF)"),
	new java.rmi.server.Operation("void discardRecordableVolume(com.igeekinc.util.discburning.BurnVolume)"),
	new java.rmi.server.Operation("com.igeekinc.util.discburning.remote.RemoteBurnDevice getBurnDeviceForID(com.igeekinc.util.discburning.BurnDeviceID)"),
	new java.rmi.server.Operation("com.igeekinc.util.discburning.remote.RemoteBurnDevice getBurningDevices()[]"),
	new java.rmi.server.Operation("void setBurnDeviceEventDelivery(com.igeekinc.util.discburning.remote.RemoteDiscBurningEventDelivery)")
    };
    
    private static final long interfaceHash = -2314618545386665974L;
    
    // constructors
    public RemoteDiscBurningImpl_Stub() {
	super();
    }
    public RemoteDiscBurningImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of burnVolume(BurnDevice, BurnVolume, BurnSetupProperties, BurnProgressIndicator, PauserControlleeIF)
    public void burnVolume(com.igeekinc.util.discburning.BurnDevice $param_BurnDevice_1, com.igeekinc.util.discburning.BurnVolume $param_BurnVolume_2, com.igeekinc.util.discburning.BurnSetupProperties $param_BurnSetupProperties_3, com.igeekinc.util.discburning.BurnProgressIndicator $param_BurnProgressIndicator_4, com.igeekinc.util.pauseabort.PauserControlleeIF $param_PauserControlleeIF_5)
	throws com.igeekinc.util.pauseabort.AbortedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_BurnDevice_1);
		out.writeObject($param_BurnVolume_2);
		out.writeObject($param_BurnSetupProperties_3);
		out.writeObject($param_BurnProgressIndicator_4);
		out.writeObject($param_PauserControlleeIF_5);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.util.pauseabort.AbortedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of close()
    public void close()
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of createRecordableVolume(String, PauserControlleeIF)
    public com.igeekinc.util.discburning.BurnVolume createRecordableVolume(java.lang.String $param_String_1, com.igeekinc.util.pauseabort.PauserControlleeIF $param_PauserControlleeIF_2)
	throws com.igeekinc.util.pauseabort.AbortedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
		out.writeObject($param_PauserControlleeIF_2);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.util.discburning.BurnVolume $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.util.discburning.BurnVolume) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.util.pauseabort.AbortedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of discardRecordableVolume(BurnVolume)
    public void discardRecordableVolume(com.igeekinc.util.discburning.BurnVolume $param_BurnVolume_1)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_BurnVolume_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getBurnDeviceForID(BurnDeviceID)
    public com.igeekinc.util.discburning.remote.RemoteBurnDevice getBurnDeviceForID(com.igeekinc.util.discburning.BurnDeviceID $param_BurnDeviceID_1)
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_BurnDeviceID_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.util.discburning.remote.RemoteBurnDevice $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.util.discburning.remote.RemoteBurnDevice) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getBurningDevices()
    public com.igeekinc.util.discburning.remote.RemoteBurnDevice[] getBurningDevices()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 5, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.util.discburning.remote.RemoteBurnDevice[] $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.util.discburning.remote.RemoteBurnDevice[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setBurnDeviceEventDelivery(RemoteDiscBurningEventDelivery)
    public void setBurnDeviceEventDelivery(com.igeekinc.util.discburning.remote.RemoteDiscBurningEventDelivery $param_RemoteDiscBurningEventDelivery_1)
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 6, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_RemoteDiscBurningEventDelivery_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
